
########################################################################################
"""
Program        : straintides.py
Author         : Guoheng Qi (qi.gh@outlook.com)
Description    : to compute the strain solid earth's tides tensor
Initial Release: 2024-01-05
Last Modified  : 2024-01-05
Version 1.0
"""
########################################################################################

import numpy as np

#---------------------------------------------------------------------------
#   函数julian1 ：计算时刻的儒略世纪数-方法1
#   refer to   : https://blog.csdn.net/weixin_43948644/article/details/86685238
#---------------------------------------------------------------------------
def julian1(y, m, d , t):
    yy = y - 1900
    mm = m - 1
    dd = d
    w = yy // 4
    if y == 4 * w and mm < 2:
        dd = dd - 1
    if mm == 0:
        d1 = yy * 365 + w - 0.5 + mm + dd
    elif mm == 1:
        mm = 31
        d1 = yy * 365 + w - 0.5 + mm + dd
    else:
        mm = mm * 365 // 12 - 10 // (4 + mm)
        d1 = yy * 365 + w - 0.5 + mm + dd
    R = d1 + 2415020.0
#     T = (R-2415020+(t-8)/24)/(36525)
    T = (R-2451545+(t-8)/24)/(36525) # 自2000年1月1日12时（JD＝2451545T DB）算起 (董良 等， 2014）
    return T
#----------------------------------------------------------------
    # 函数：计算时刻的儒略世纪数-方法2
    # refer to (骆鸣津 等，1986)
    # 所用参数：y : 计算年份历元; 
    #      D4: 1900年首至计算年份历元年首之间的闰年数, 在2000年内D=INT((y-1900-1)/4),INT表示取整;
    #      d : 计算年首至计算日之整日数;
    #      t : 计算时刻（北京时）。
#----------------------------------------------------------------
def julian2(y, d , t):
    D4 = int((y-1900-1)/4) 
    T = 1/36525 * ((y-1900)*365 + D4 + d + 0.5+ (t-8)/24)
    return T
#----------------------------------------------------------------

#################################
#     所求位置，时间(需要修改)
#################################
phi_ =  40        # 待算点的地理纬度
Lambda =  110      # 待算点的地理经度
year =   2023          # 年份纪元
month =  5   
day = 1 
t =  1   # 北京时

#################################

#--------------------------------------------------------------------------------------------------------------------------------
#    [0] 所需参数
#--------------------------------------------------------------------------------------------------------------------------------
RE    = 6378137         # 地球赤道半径, 单位：m
alpha = 1/298.256        # 地球扁率
R_    = 6371024         # 地球平均半径, 单位：m
C_m   = 384400*10**3    # 月地平均距离, 单位：m
C_s   = 149600*10**6    # 日地平均距离, 单位: m
D     = 26277           # Doodson常数，26277 cm2·s-2
D_s   = D*0.45924

#--------------------------------------------------------------------------------------------------------------------------------
#    [1] 由计算地点的地理纬度phi'(phi_)计算地心纬度phi、余纬日hea、地心向径R、重力加速度g:
#--------------------------------------------------------------------------------------------------------------------------------
# phi   = phi_ - alpha * np.sin(2*phi_/180.0*np.pi)                # 地心纬度, 单位： °  (骆鸣津 等，1986)
phi   = np.arctan((1-alpha)**2 * np.tan(phi_)) / np.pi * 180     # 地心纬度, 单位： °  (董良 等， 2014）
theta = 90 - phi 
R     = (0.998324 + 0.001676*np.cos(2*phi))*RE
g     = 987.03175*(1+0.00530245*np.sin(phi)**2 - 0.00000585* np.sin(2*phi)**2) # cm s-2

#--------------------------------------------------------------------------------------------------------------------------------
#     [2] 求计算时刻的儒略世纪数
#--------------------------------------------------------------------------------------------------------------------------------
T = julian1(year, month, day, t)

#--------------------------------------------------------------------------------------------------------------------------------
#     [3] 计算6个天文常数  --未采用最新公布的Ｊ２０００．０系统
#--------------------------------------------------------------------------------------------------------------------------------
S = 270.43416 + 481267.88314 * T - 0.00113 * T**2 + 0.000002 * T**3     # S: 月亮平黄经
h = 279.69668 + 36000.76892  * T + 0.0030  * T**2                       # h: 太阳平黄经
p = 334.32956 + 4069.03403   * T - 0.01032 * T**2 - 0.00001  * T**3     # p: 月亮近地点平黄经
N = 259.18328 - 1934.14201   * T + 0.00208 * T**2 + 0.000002 * T**3     # N: 月亮升交点平黄经
ps = 281.22083 + 1.71918     * T + 0.00045 * T**2 + 0.000003 * T**3     # p_s:太阳近地点平黄经
Epsilon = 23.45229 - 0.01301 * T - 0.000002* T**2 + 0.0000005* T**3     # e: 平黄赤交角

#--------------------------------------------------------------------------------------------------------------------------------
#     [4] 计算C_m/r_m, lambda_m, beta_m,, C_S/r_s, lambda_s
#--------------------------------------------------------------------------------------------------------------------------------
CmRm = 1 + 0.0100 * np.cos(S - 2*h + p) + 0.0545 * np.cos(S - p) \
        + 0.0030 * np.cos(2*S - 2*p) + 0.0009 * np.cos(3*S - 2*h - p) \
        + 0.0006 * np.cos(2*S - 3*h + ps) + 0.0082*np.cos(2 * (S-h))

lambda_m = S - 0.0032*np.sin(h-ps)      - 0.001*np.sin(2*h-2*p) \
            + 0.001*np.sin(S-3*h+p+ps) + 0.0222*np.sin(S-2*h+p) \
            + 0.0007*np.sin(S-h-p+ps)  - 0.0006*np.sin(S-h) \
            + 0.1098*np.sin(S-p)       - 0.0005*np.sin(S+h-p-ps) \
            + 0.0008*np.sin(2*S-3*h+ps)+ 0.0115*np.sin(2*S-2*h) \
            + 0.0037*np.sin(2*S-2*p)   - 0.002*np.sin(2*S-2*N) \
            + 0.0009*np.sin(3*S-2*h-p)

beta_m = - 0.0048*np.sin(p-N)       - 0.0008*np.sin(2*h-p-N) \
         + 0.003*np.sin(S-2*h+N)    + 0.0895*np.sin(S-N) \
         + 0.001*np.sin(2*S-2*h+p-N)+ 0.0049*np.sin(2*S-p-N) \
         + 0.0006*np.sin(3*S-2*h-N)

CsRs = 1 + 0.0168 * np.cos(h - ps) + 0.0003 * np.cos(2*h - 2*ps)

lambda_s = h + 0.0335 * np.sin(h - ps) + 0.0004 * np.sin(2*h -2*ps)

#--------------------------------------------------------------------------------------------------------------------------------
#     [5] 求待算点待算时刻的地方恒星时t'
#--------------------------------------------------------------------------------------------------------------------------------
t_ = (t-8) * 15  + h + Lambda - 180

#--------------------------------------------------------------------------------------------------------------------------------
#     [6] 由黄道坐标转为赤道坐标
#         theta_m: 月亮的赤纬; theta_s:太阳的赤纬; 
#         t_m    : 月亮的时角; t_s    :太阳的时角.
#--------------------------------------------------------------------------------------------------------------------------------
sin_delta_m         = np.sin(Epsilon) * np.sin(lambda_m) * np.cos(beta_m) + np.cos(Epsilon)*np.sin(beta_m)
cos_delta_m_cos_t_m = np.cos(beta_m) * np.cos(lambda_m) * np.cos(t_) + np.sin(t_) * (np.cos(Epsilon)*np.cos(beta_m)*np.sin(lambda_m)-np.sin(Epsilon)*np.sin(beta_m))
cos_delta_m_sin_t_m = np.cos(beta_m) * np.cos(lambda_m) * np.sin(t_) - np.cos(t_) * (np.cos(Epsilon)*np.cos(beta_m)*np.sin(lambda_m)-np.sin(Epsilon)*np.sin(beta_m))

sin_delta_s         = np.sin(Epsilon) * np.sin(lambda_s)
cos_delta_s_cos_t_s = np.cos(lambda_s) * np.cos(t_) + np.sin(t_) * np.cos(Epsilon)*np.sin(lambda_s)
cos_delta_s_sin_t_s = np.cos(lambda_s) * np.sin(t_) + np.cos(t) * np.cos(Epsilon)*np.sin(lambda_s)

#--------------------------------------------------------------------------------------------------------------------------------
#     [7] 求月亮和太阳的地心天顶距Z_m和Z_s
#--------------------------------------------------------------------------------------------------------------------------------
cos_Z_m = np.sin(phi) * sin_delta_m + np.cos(phi) * cos_delta_m_cos_t_m
cos_Z_s = np.sin(phi) * sin_delta_s + np.cos(phi) * cos_delta_s_cos_t_s

#--------------------------------------------------------------------------------------------------------------------------------
#     [8] 中间变量
#--------------------------------------------------------------------------------------------------------------------------------
A_m = cos_Z_m
B_m = np.cos(phi) * sin_delta_m - np.sin(phi) * cos_delta_m_cos_t_m
F_m = np.cos(phi) * cos_delta_m_sin_t_m
D_m = np.cos(phi) * cos_delta_m_cos_t_m
E_m = np.sin(phi) * cos_delta_m_sin_t_m

A_s = cos_Z_s
B_s = np.cos(phi) * sin_delta_s - np.sin(phi) * cos_delta_s_cos_t_s
F_s = np.cos(phi) * cos_delta_s_sin_t_s
D_s = np.cos(phi) * cos_delta_s_cos_t_s
E_s = np.sin(phi) * cos_delta_s_sin_t_s

#--------------------------------------------------------------------------------------------------------------------------------
#      [9] 计算由(10)至(15)式求应变张量时必须用到的导数表达式
#--------------------------------------------------------------------------------------------------------------------------------
X1 = 3/2 * A_m*A_m - 1/2
X2 = -3  * A_m*B_m
X3 = -3  * A_m*A_m + 3  * B_m*B_m
X4 = -3  * A_m*F_m
X5 = -3  * A_m*D_m + 3  * F_m*F_m
X6 =  3  * B_m*F_m - 3  * A_m*E_m

X7 = 3/2 * A_s*A_s - 1/2
X8 = -3  * A_s*B_s
X9 = -3  * A_s*A_s + 3  * B_s*B_s
X10= -3  * A_s*F_s
X11= -3  * A_s*D_s + 3  * F_s*F_s
X12 = 3  * B_s*F_s - 3  * A_s*E_s 

X13 = 5/2   * A_m**3          - 3/2  * A_m 
X14 = -15/2 * A_m**2 * B_m    + 3/2  * B_m 
X15 = 15    * A_m * B_m**2    - 15/2 * A_m**3       + 3/2 * A_m
X16 = -15/2 * A_m**2 * F_m    + 3/2  * F_m 
X17 = 15    * A_m * F_m**2    - 15/2 * A_m**2 * D_m + 3/2 * D_m 
X18 = 15    * A_m * B_m * F_m - 15/2 * A_m**2 * E_m + 3/2 * E_m 

#--------------------------------------------------------------------------------------------------------------------------------
#      [10] 求系数Ym2,Ys2,Ym3
#--------------------------------------------------------------------------------------------------------------------------------
Ym2 = 4/3*D  *(CmRm)**3 * (R/R_)**2 / (R*g)
Ym3 = 4/3*D  *(CmRm)**4 * R**3      / (R_**2 * C_m * R *g)
Ys2 = 4/3*D_s*(CmRm)**3 * (R/R_)**2 / (R*g)

#--------------------------------------------------------------------------------------------------------------------------------
#      [11] 求六个应变分量
#--------------------------------------------------------------------------------------------------------------------------------
l2 = 0.0832     # refer to Farrell's G-B earth's model A, 
h2 = 0.6114
l3 = 0.0145
h3 = 0.2891
l2_ = l2*(-3.1425e-9)  # refer to Melchior's 假设
l3_ = l3*(-3.1425e-9)

err = 2*h2*(Ym2*X1 + Ys2*X7) + 3*h3*Ym3*X13

ess = l2 * (Ym2*X3 + Ys2*X9) + l3*Ym3*X15 + h2*(Ym2*X1 + Ys2*X7) + h3*Ym3*X13

ell = l2/(np.sin(theta)**2) * (Ym2*X5 + Ys2*X11) + l3/(np.sin(theta)**2)*Ym3*X17 \
        + l2/np.tan(theta)  * (Ym2*X2 + Ys2*X8)  + l3/np.tan(theta)*Ym3*X14 \
        + h2 * (Ym2*X1 + Ys2*X7)                 + h3*Ym3*X13

esl = 2*l2/np.sin(theta)    * (Ym2*X6 + Ys2*X12) + 2*l3/np.sin(theta)*Ym3*X18 \
        - 2*l2/np.sin(theta)/np.tan(theta)*(Ym2*X4 + Ys2*X10) \
        - 2*l3/np.sin(theta)/np.tan(theta)*Ym3*X16

elr = 1/np.sin(theta)*(h2+l2+R*l2_)*(Ym2*X4+Ys2*X10)\
        + 1/np.sin(theta)*(h3+2*l3+R*l3_)*Ym3*X16

ers = (h2 + l2)*(Ym2*X2+Ys2*X3)+(h3+2*l3)*Ym3*X14

print(err,ell,esl,ers,esl)








